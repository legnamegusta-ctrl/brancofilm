rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function appSettings() { return get(/databases/$(database)/documents/settings/app).data; }
    function inUnit(doc) {
      return !appSettings().multiUnit || isAdmin() || doc.data.unitId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.unitId;
    }
    match /users/{uid} {
      allow read: if signedIn() && (uid == request.auth.uid || isAdmin());
      allow write: if isAdmin();
    }
    match /clientErrors/{id} {
      allow create: if signedIn();
      allow read: if isAdmin();
      allow delete: if false;
    }
    match /settings/goals/{month} {
      allow read: if signedIn();
      allow write: if isAdmin();
    }
    match /units/{id} {
      allow read: if signedIn();
      allow write: if isAdmin();
    }
    match /auditLogs/{id} {
      allow read: if signedIn();
      allow write: if false;
    }
    match /orders/{id} {
      allow read: if signedIn() && inUnit(resource);
      allow write: if isAdmin();
    }
    match /quotes_public/{token} {
      allow read: if true;
      allow write: if false;
    }
    match /{document=**} {
      allow read, write: if signedIn() && inUnit(resource);
    }
  }
}

// índices necessários:
// orders(scheduledStart asc)
// orders(status asc, createdAt desc)
// orders(status asc, kanbanOrder asc)
// orders(assignedTo asc, scheduledStart asc)
// orders(customerId asc, scheduledStart asc)
// orders(vehicleId asc, scheduledStart asc)
// quotes(status asc, createdAt desc)
// quotes_public(token asc)
// users(role asc)
// services(createdAt desc)
// clientErrors(route asc, ts desc)
// orders(unitId asc, status asc)
